name: Claude Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: string

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR number
        id: pr-number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { owner, repo } = context.repo;
              const prNumber = ${{ steps.pr-number.outputs.number }};
              
              console.log(`Getting PR #${prNumber} from ${owner}/${repo}`);
              
              const pr = await github.rest.pulls.get({
                owner: owner,
                repo: repo,
                pull_number: prNumber
              });
              
              console.log('PR Details:', {
                base: pr.data.base.ref,
                base_sha: pr.data.base.sha,
                head: pr.data.head.ref,
                head_sha: pr.data.head.sha
              });
              
              return {
                base_sha: pr.data.base.sha,
                head_sha: pr.data.head.sha,
                base_ref: pr.data.base.ref,
                head_ref: pr.data.head.ref
              };
            } catch (error) {
              core.setFailed(`Failed to get PR details: ${error.message}`);
              throw error;
            }

      - name: Generate diff
        id: changed-files
        run: |
          # Configure git to fetch PR refs
          git config --local --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"
          git fetch origin
          
          BASE_SHA="${{ fromJSON(steps.pr-details.outputs.result).base_sha }}"
          HEAD_SHA="${{ fromJSON(steps.pr-details.outputs.result).head_sha }}"
          
          echo "Comparing $BASE_SHA..$HEAD_SHA"
          
          # Get the diff
          git diff "$BASE_SHA" "$HEAD_SHA" > changes.diff
          
          # Filter the diff for specific file types
          if [ -s changes.diff ]; then
            cat changes.diff | grep -v -E '(package-lock.json|yarn.lock|node_modules|\.md$|\.json$)' | grep -E '\.(js|ts|py|cpp|h|java|cs)$' > filtered_changes.diff || true
            
            if [ -s filtered_changes.diff ]; then
              DIFF_SIZE=$(wc -c < filtered_changes.diff)
              echo "Found $DIFF_SIZE bytes of relevant changes"
              echo "diff_size=$DIFF_SIZE" >> $GITHUB_OUTPUT
              
              # Store the diff content for the next step
              DIFF_CONTENT=$(cat filtered_changes.diff)
              echo "diff_content<<EOF" >> $GITHUB_OUTPUT
              echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              
              echo "Preview of changes:"
              head -n 5 filtered_changes.diff
            else
              echo "No relevant file changes found"
              echo "diff_size=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "No changes found"
            echo "diff_size=0" >> $GITHUB_OUTPUT
          fi

      - name: Analyze code with Claude
        if: steps.changed-files.outputs.diff_size != '0'
        id: analysis
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get the diff content from the previous step
          DIFF_CONTENT="${{ steps.changed-files.outputs.diff_content }}"
          
          # Create the request body using jq
          REQUEST_BODY=$(jq -n \
            --arg content "You are performing a code review. Please analyze this code diff and provide a thorough review that covers:

          1. Potential conflicts with existing codebase
          2. Code correctness and potential bugs
          3. Security vulnerabilities or risks
          4. Performance implications
          5. Maintainability and readability issues
          6. Adherence to best practices and coding standards
          7. Suggestions for improvements

          For each issue found:
          - Explain the problem clearly
          - Rate the severity (Critical/High/Medium/Low)
          - Provide specific recommendations for fixes
          - Include code examples where helpful

          If no issues are found in a particular area, explicitly state that.

          Here is the code diff to review:

          \`\`\`
          $DIFF_CONTENT
          \`\`\`" \
            '{
              "model": "claude-3-sonnet-20240229",
              "max_tokens": 4096,
              "temperature": 0.7,
              "messages": [{
                "role": "user",
                "content": $content
              }]
            }')

          # Make the API request
          echo "Sending request to Claude API..."
          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d "$REQUEST_BODY")
          
          echo "Response received, checking for content..."
          
          if echo "$RESPONSE" | jq -e '.content[0].text' > /dev/null; then
            REVIEW=$(echo "$RESPONSE" | jq -r '.content[0].text')
            echo "review<<EOF" >> $GITHUB_OUTPUT
            echo "$REVIEW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Error in Claude API response: $RESPONSE"
            exit 1
          fi

      - name: Post review comment
        if: success() && steps.changed-files.outputs.diff_size != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const review = `${{ steps.analysis.outputs.review }}`;
            const prNumber = ${{ steps.pr-number.outputs.number }};
            
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: prNumber,
              body: `# Claude Code Review\n\n${review}`
            });
